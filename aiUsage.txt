Alyssa Vallejo (918606017) Portion of AI

Prompt:
(NOTE: I should have specified no code in the prompt and I apologize.)
Homework 2 requires that we either have the frontend retrieve the API key from the backend or use the backend as a proxy, can you explain the second option

Response:
Certainly! Using the backend as a proxy is a common approach to handle API requests securely. Here's a step-by-step explanation of how this works:

What is a Proxy?
A proxy is an intermediary server that forwards requests and responses between the client (frontend) and another server (API). Instead of the frontend directly making requests to the external API (like the New York Times API in HW2), the frontend sends the request to the backend. The backend then communicates with the external API, retrieves the data, and sends it back to the frontend.

Why Use a Proxy?
Security: By using a proxy, you can prevent exposing sensitive information like the API key to the client. If the frontend directly fetches data from the API, the API key would need to be hardcoded in the frontend code, which is visible to users and could be misused.
CORS Issues: Some APIs restrict access to their resources based on the origin (domain) of the request. A proxy can bypass these restrictions by making the request on behalf of the client.
Centralized Logic: The backend can handle complex business logic, like filtering or transforming the API response before sending it to the frontend.
How Does a Proxy Work in HW2?
Frontend Request: The frontend makes a request to the backend (e.g., /api/nyt-stories).
Backend Logic:
The backend receives the request.
It appends the API key and any required query parameters to construct the request URL for the external API.
It makes the request to the external API (e.g., New York Times API).
Backend Response:
The backend processes the response from the external API (e.g., filtering stories).
It sends the processed data back to the frontend.
Frontend Display: The frontend receives the data from the backend and updates the UI accordingly.
Steps to Implement a Proxy in Flask
Here’s a general outline:

Create a Flask Route:
Define an endpoint in your Flask backend (e.g., /api/nyt-stories).
This endpoint will act as the proxy for the New York Times API.
from flask import Flask, request, jsonify
   import requests

   app = Flask(__name__)

   NYT_API_URL = "https://api.nytimes.com/svc/topstories/v2/"
   NYT_API_KEY = "your_api_key_here"  # Store your API key securely

   @app.route("/api/nyt-stories", methods=["GET"])
   def proxy_nyt():
       category = request.args.get("category", "home")  # Default to 'home' if no category is provided
       url = f"{NYT_API_URL}{category}.json?api-key={NYT_API_KEY}"
       response = requests.get(url)
       if response.status_code == 200:
           return jsonify(response.json())  # Return the JSON response to the frontend
       else:
           return jsonify({"error": "Unable to fetch data"}), response.status_code

Frontend Fetch:
The frontend fetches data from the Flask route instead of directly calling the New York Times API.
Example:
fetch("/api/nyt-stories?category=world")
     .then(response => response.json())
     .then(data => {
       console.log(data); // Process and display the data
     })
     .catch(error => {
       console.error("Error fetching data:", error);
     });

Handle Errors:
Ensure the backend handles errors gracefully (e.g., if the external API is down or the API key is invalid).
Return meaningful error messages to the frontend.

Benefits of This Approach
API Key Protection: The API key remains hidden in the backend, ensuring it’s not exposed to users.
Simplified Frontend Logic: The frontend doesn’t need to worry about constructing complex API requests; it simply interacts with the backend.
Scalability: You can add additional logic in the backend, like caching responses or filtering the data, without modifying the frontend.

Usage/Incorporation:
I wasn't intending on using these examples for my own code, I was just confused on what using the backend as a proxy meant.
Since I saw the code, I can't unsee it, so I will make a note of the structure of the code in my file with a comment.
I will use the example for the backend as a basis for my code because I was originally under the impression that we can just use the route "/api/key" to get the key to the frontend and fetch the NYT url through the frontend as well.
From CourseAssist's explanation, this is not very secure so I will go with the logic it suggested and implement a similar piece of code to what it suggested. 
I will NOT copy it as it needs to be modified since we are using typescript and we are also using os.getven in /api/key to retrieve the API Key. 
I understand now why this method is important as we don't want any chance of the API key being exposed to the frontend in any way.
This method will make it so that the frontend is still able to request an article from the NYT but will not actually make the fetch(NYTURL) call.
These fetch get requests will be done all from the backend and the backend will send the articles to the frontend.